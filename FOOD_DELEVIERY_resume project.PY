import pandas as pd

food_orders = pd.read_csv(r"E:\Courses\food_orders_new_delhi.csv")

print(food_orders.head())


print(food_orders.info())

''' we need to perform some data cleaning and preparation. Below are the necessary cleaning steps we need to take:

Convert “Order Date and Time” and “Delivery Date and Time” to a datetime format.
Convert “Discounts and Offers” to a consistent numeric value (if applicable) or calculate the discount amounts.
Ensure all monetary values are in a suitable format for calculations.
Let’s perform these data preparation steps:'''

from datetime import datetime

import pandas as pd

# Assuming food_orders is our DataFrame

# First, let's create a function to extract numeric values from the 'Discounts and Offers' string
def extract_discount(discount_str):
    if isinstance(discount_str, str):
        if 'off' in discount_str:
            # Fixed amount off
            return float(discount_str.split(' ')[0])
        elif '%' in discount_str:
            # Percentage off
            return float(discount_str.split('%')[0])
    return 0.0  # Return 0.0 if discount_str is not a string or doesn't contain 'off' or '%'

# Appling the function to create a new 'Discount Percentage' column
food_orders['Discount Percentage'] = food_orders['Discounts and Offers'].apply(extract_discount)

# For percentage discounts, calculating the discount amount based on the order value
food_orders['Discount Amount'] = food_orders.apply(lambda x: (x['Order Value'] * x['Discount Percentage'] / 100)
                                                   if x['Discount Percentage'] > 1
                                                   else x['Discount Percentage'], axis=1)

# Adjust 'Discount Amount' for fixed discounts directly specified in the 'Discounts and Offers' column
food_orders['Discount Amount'] = food_orders.apply(lambda x: x['Discount Amount'] if x['Discount Percentage'] <= 1
                                                   else x['Order Value'] * x['Discount Percentage'] / 100, axis=1)

print(food_orders[['Order Value', 'Discounts and Offers', 'Discount Percentage', 'Discount Amount']].head(), food_orders.dtypes)


'''The data is now ready with the following adjustments:
.
A new column, Discount Amount, has been calculated based on the Discounts and Offers column. This was achieved by extracting percentage discounts or fixed amounts and applying them to the order value.
Discount Percentage has been added to represent the discount rate or fixed amount discount directly.'''



'''Cost and Profitability Analysis:

For the cost analysis, we’ll consider the following costs associated with each order:

Delivery Fee: The fee charged for delivering the order.
Payment Processing Fee: The fee for processing the payment.
Discount Amount: The discount provided on the order.
We’ll calculate the total cost for the platform per order and then aggregate this data to understand the overall cost structure.

The revenue for the platform is mainly derived from the Commission Fee. We’ll calculate the net profit by subtracting the total costs (including discounts) from the revenue generated through commission fees.

Let’s proceed with the cost and profitability analysis:'''

# calculate total costs and revenue per order
food_orders['Total Costs'] = food_orders['Delivery Fee'] + food_orders['Payment Processing Fee'] + food_orders['Discount Amount']
food_orders['Revenue'] = food_orders['Commission Fee']
food_orders['Profit'] = food_orders['Revenue'] - food_orders['Total Costs']


# aggregate data to get overall metrics
total_orders = food_orders.shape[0]
total_revenue = food_orders['Revenue'].sum()
total_costs = food_orders['Total Costs'].sum()
total_profit = food_orders['Profit'].sum()

overall_metrics = {
    "Total Orders": total_orders,
    "Total Revenue": total_revenue,
    "Total Costs": total_costs,
    "Total Profit": total_profit
}

print(overall_metrics)


'''Based on the analysis, here are the overall metrics for the food delivery operations:

Total Orders: 1,000
Total Revenue (from Commission Fees): 126,990 INR
Total Costs: 232,709.85 INR (including delivery fees, payment processing fees, and discounts)
Total Profit: -105,719.85 INR
The analysis indicates that the total costs associated with the food delivery operations exceed the total revenue generated from commission fees, resulting in a net loss. It suggests that the current commission rates, delivery fees, and discount strategies might not be sustainable for profitability.

To better understand the distribution of costs, revenue, and profit, let’s plot:


A pie chart to visualize the proportion of total costs (delivery fees, payment processing fees, and discounts).
A bar chart to compare total revenue, total costs, and total profit
'''

import matplotlib.pyplot as plt

''' proportion of total costs:'''


# pie chart for the proportion of total costs

costs_breakdown = food_orders[['Delivery Fee', 'Payment Processing Fee', 'Discount Amount']].sum()

plt.figure(figsize=(7, 7))

plt.pie(costs_breakdown, labels=costs_breakdown.index, autopct='%1.1f%%', startangle=140, colors=['tomato', 'gold', 'lightblue'])
plt.title('Proportion of Total Costs in Food Delivery')
plt.show()


''''The pie chart illustrates the breakdown of total costs into delivery fees, payment processing fees,
 and discount amounts. 
 Discounts constitute a significant portion of the costs,
   suggesting that promotional strategies might be heavily impacting overall profitability.

 let’s compare total revenue, total costs, and total profit (net loss in our case):'''

# bar chart for total revenue, costs, and profit
totals = ['Total Revenue', 'Total Costs', 'Total Profit']
values = [total_revenue, total_costs, total_profit]

plt.figure(figsize=(8, 6))
plt.bar(totals, values, color=['green', 'red', 'blue'])
plt.title('Total Revenue, Costs, and Profit')
plt.ylabel('Amount (INR)')
plt.show()

'''The bar chart compares total revenue, total costs, and total profit.
 It visually represents the gap between revenue and costs, clearly showing that the costs surpass the revenue, 
 leading to a total loss.'''

# bar chart for total revenue, costs, and profit


'''A New Strategy for Profits
From the analysis so far we understood that the discounts on food orders are resulting in huge losses.
 Now, we need to find a new strategy for profitability.
   We need to find a sweet spot for offering discounts and charging commissions. 
 To find a sweet spot for commission and discount percentages, we can analyze the characteristics of profitable orders more deeply. 
 Specifically, we need to look for:

A new average commission percentage based on profitable orders.
A new average discount percentage for profitable orders,
 that could serve as a guideline for what level of discount still allows for profitability.'''

''''The average commission percentage for profitable orders is significantly higher than the overall average across all orders. 
It suggests that a higher commission rate on orders might be a key factor in achieving profitability. 
The average discount percentage for profitable orders is notably lower than the overall average, indicating that 
lower discounts might contribute to profitability without significantly deterring order volume.

Based on this analysis, a strategy that aims for a commission rate closer to 30% and a discount rate around 6% could potentially
 improve profitability across the board.

Now, let’s visualize a comparison of profitability using actual 
versus recommended discounts and commissions across all orders. For this, we need to:

Calculate the profitability per order using the actual discounts and commissions already present in the dataset.
Simulate profitability per order using the recommended discounts (6%) and commissions (30%) to see the potential impact on profitability.
This comparison will help illustrate the potential impact of adopting the recommended discount and commission rates on the overall profitability of orders.
 Here’s how to visualize this comparison:'''

# simulate profitability with recommended discounts and commissions
recommended_commission_percentage = 30.0  # 30%
recommended_discount_percentage = 6.0    # 6%

# calculate the simulated commission fee and discount amount using recommended percentages
food_orders['Simulated Commission Fee'] = food_orders['Order Value'] * (recommended_commission_percentage / 100)
food_orders['Simulated Discount Amount'] = food_orders['Order Value'] * (recommended_discount_percentage / 100)

# recalculate total costs and profit with simulated values
food_orders['Simulated Total Costs'] = (food_orders['Delivery Fee'] +
                                        food_orders['Payment Processing Fee'] +
                                        food_orders['Simulated Discount Amount'])

food_orders['Simulated Profit'] = (food_orders['Simulated Commission Fee'] -
                                   food_orders['Simulated Total Costs'])

# visualizing the comparison
import seaborn as sns

plt.figure(figsize=(14, 7))

# actual profitability
sns.kdeplot(food_orders['Profit'], label='Actual Profitability', fill=True, alpha=0.5, linewidth=2)

# simulated profitability
sns.kdeplot(food_orders['Simulated Profit'], label='Estimated Profitability with Recommended Rates', fill=True, alpha=0.5, linewidth=2)

plt.title('Comparison of Profitability in Food Delivery: Actual vs. Recommended Discounts and Commissions')
plt.xlabel('Profit')
plt.ylabel('Density')
plt.legend(loc='upper left')
plt.show()

'''The visualization compares the distribution of profitability per order using actual discounts and
 commissions versus the simulated scenario with recommended discounts (6%) and commissions (30%).

The actual profitability distribution shows a mix, with a significant portion of orders resulting in losses (profit < 0) and a broad spread of profit levels for orders.
The simulated scenario suggests a shift towards higher profitability per order. The distribution is more skewed towards positive profit, indicating that the recommended adjustments could lead to a higher proportion of profitable orders.

Summary
So, this is how you can analyze the cost and profitability of a food delivery company.
Food Delivery Cost and Profitability Analysis involves examining all the costs associated with delivering food orders,
 from direct expenses like delivery fees and packaging to indirect expenses like discounts offered to customers and commission fees paid by restaurants.
 By juxtaposing these costs against the revenue generated (primarily through order values and commission fees), 
 the analysis aims to provide insights into how profitable the food delivery service is on a per-order basis.

y Analysis using Python. Feel free to ask valuable questions in the comments section below. You can follow me on Instagram for many more resources.'''

